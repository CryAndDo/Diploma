// controllers/competitionController.js
const { sql, dbConfig } = require('../db');

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –æ—Ç—á–∏—Å–ª–µ–Ω
async function ensureStudentActive(pool, studentId) {
  const check = await pool.request().input('sid', sql.Int, parseInt(studentId)).query(`
      SELECT IsExpelled
      FROM UorPitanie.Students
      WHERE Id = @sid;
    `);

  if (!check.recordset.length) {
    const err = new Error('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    err.status = 404;
    throw err;
  }

  if (check.recordset[0].IsExpelled) {
    const err = new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é: —Å—Ç—É–¥–µ–Ω—Ç –æ—Ç—á–∏—Å–ª–µ–Ω');
    err.status = 400;
    throw err;
  }
}

// 1) –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞/–≤—ã–±–æ—Ä–∞) ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–∏—Å–ª–µ–Ω–Ω—ã—Ö
exports.searchStudents = async (req, res) => {
  const { q } = req.query;
  try {
    const pool = await sql.connect(dbConfig);
    const txt = `%${q || ''}%`;
    const result = await pool.request().input('q', sql.NVarChar(200), txt).query(`
        SELECT TOP(50)
          s.Id,
          s.FIO,
          s.[Group],
          s.SportType
        FROM UorPitanie.Students s
        WHERE (s.FIO LIKE @q OR s.[Group] LIKE @q OR s.SportType LIKE @q)
          AND s.IsExpelled = 0
        ORDER BY s.FIO;
      `);
    res.json(result.recordset);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ searchStudents:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' });
  }
};

// 2) –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–Ω–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã)
exports.getCompetitionDays = async (req, res) => {
  try {
    const pool = await sql.connect(dbConfig);
    const result = await pool.request().query(`
        SELECT
          d.Id,
          d.StudentId,
          CONVERT(varchar(10), d.DepartureDate, 23) AS DepartureDate,
          CONVERT(varchar(10), d.ReturnDate, 23)    AS ReturnDate,
          s.FIO,
          s.[Group],
          s.SportType
        FROM UorPitanie.SportsCompetitionDays d
        JOIN UorPitanie.Students s ON s.Id = d.StudentId
        WHERE s.IsExpelled = 0
        ORDER BY d.DepartureDate DESC;
      `);
    res.json(result.recordset);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ getCompetitionDays:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π' });
  }
};

// 3) –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö
exports.addCompetition = async (req, res) => {
  const { studentId, departureDate, returnDate } = req.body;
  if (!studentId || !departureDate || !returnDate) {
    return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' });
  }
  try {
    const pool = await sql.connect(dbConfig);

    await ensureStudentActive(pool, studentId);

    await pool
      .request()
      .input('sid', sql.Int, parseInt(studentId))
      .input('dep', sql.Date, departureDate)
      .input('ret', sql.Date, returnDate).query(`
        INSERT INTO UorPitanie.SportsCompetitionDays
          (StudentId, DepartureDate, ReturnDate)
        VALUES (@sid, @dep, @ret);
      `);

    res.status(201).json({ message: '–î–æ–±–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ addCompetition:', err);
    res
      .status(err.status || 500)
      .json({ error: err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ' });
  }
};

// 4) –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
exports.deleteCompetition = async (req, res) => {
  const { id } = req.params;
  try {
    const pool = await sql.connect(dbConfig);

    const findRec = await pool.request().input('id', sql.Int, id).query(`
        SELECT StudentId
        FROM UorPitanie.SportsCompetitionDays
        WHERE Id = @id;
      `);

    if (!findRec.recordset.length) {
      return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const studentId = findRec.recordset[0].StudentId;
    await ensureStudentActive(pool, studentId);

    await pool.request().input('id', sql.Int, id).query(`
        DELETE FROM UorPitanie.SportsCompetitionDays
        WHERE Id = @id;
      `);

    res.json({ message: '–£–¥–∞–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ deleteCompetition:', err);
    res.status(err.status || 500).json({ error: err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å' });
  }
};

// 5) –ü–æ–ª—É—á–∏—Ç—å –í–°–ï —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è –æ—Ç—á–∏—Å–ª–µ–Ω–Ω—ã—Ö)
exports.getAllCompetitions = async (req, res) => {
  try {
    const pool = await sql.connect(dbConfig);
    const result = await pool.request().query(`
      SELECT 
        d.Id,
        d.StudentId,
        CONVERT(varchar(10), d.DepartureDate, 23) AS DepartureDate,
        CONVERT(varchar(10), d.ReturnDate, 23)    AS ReturnDate,
        s.FIO,
        s.[Group],
        s.SportType,
        s.IsExpelled
      FROM UorPitanie.SportsCompetitionDays d
      JOIN UorPitanie.Students s ON s.Id = d.StudentId
      ORDER BY d.DepartureDate DESC;
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ getAllCompetitions:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π' });
  }
};

// 6) –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö
exports.updateCompetition = async (req, res) => {
  const { id } = req.params;
  const { departureDate, returnDate } = req.body;
  if (!departureDate || !returnDate) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã' });
  }
  try {
    const pool = await sql.connect(dbConfig);

    const findRec = await pool.request().input('id', sql.Int, id).query(`
        SELECT StudentId
        FROM UorPitanie.SportsCompetitionDays
        WHERE Id = @id;
      `);
    if (!findRec.recordset.length) {
      return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const studentId = findRec.recordset[0].StudentId;
    await ensureStudentActive(pool, studentId);

    await pool
      .request()
      .input('id', sql.Int, id)
      .input('dep', sql.Date, departureDate)
      .input('ret', sql.Date, returnDate).query(`
        UPDATE UorPitanie.SportsCompetitionDays
        SET DepartureDate = @dep, ReturnDate = @ret
        WHERE Id = @id;
      `);

    res.json({ message: '–î–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ updateCompetition:', err);
    res.status(err.status || 500).json({ error: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
  }
};
